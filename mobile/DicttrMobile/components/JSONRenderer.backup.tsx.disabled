import React, { useState, useEffect } from 'react';
import { View, Text, ScrollView, TouchableOpacity, Modal, Pressable, Alert, ActivityIndicator, TextInput } from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import { JSONRendererStyles as styles } from './JSONRendererStyles';
import { transcriptionAPI } from '../services/api';

interface JSONRendererProps {
  data: any;
  onEdit?: (path: string, element: any) => void;
  onDelete?: (path: string, element: any) => void;
  onAdd?: (type: string | any, position?: number) => void;
  openModalEditor?: (content: any, path: string, element: any) => void;
}

const JSONRenderer: React.FC<JSONRendererProps> = ({ data, onEdit, onDelete, onAdd, openModalEditor }) => {
  const [showAddMenu, setShowAddMenu] = useState(false);
  const [insertPosition, setInsertPosition] = useState<number | null>(null);
  const [showAIModal, setShowAIModal] = useState(false);
  const [currentAISection, setCurrentAISection] = useState<any>(null);
  const [currentAIIndex, setCurrentAIIndex] = useState<number | null>(null);
  const [aiPrompt, setAiPrompt] = useState('');
  const [aiLoading, setAiLoading] = useState(false);

  // Debug: Verificar estructura de datos
  useEffect(() => {
    console.log('=== JSONRENDERER DEBUG ===');
    console.log('Datos recibidos:', data);
    
    if (data && typeof data === 'object') {
      if (data.blocks) {
        const conceptBlocks = data.blocks.filter((block: any) => block.type === 'concept');
        console.log('Concept blocks encontrados:', conceptBlocks.length);
        conceptBlocks.forEach((block: any, index: number) => {
          console.log(`Concept block ${index + 1}:`, block);
        });
      }
      
      if (data.sections) {
        const conceptSections = data.sections.filter((section: any) => section.type === 'concept');
        console.log('Concept sections encontrados:', conceptSections.length);
        conceptSections.forEach((section: any, index: number) => {
          console.log(`Concept section ${index + 1}:`, section);
        });
      }
    }
    console.log('=== FIN DEBUG ===');
  }, [data]);

  if (!data) {
    return <Text style={styles.empty}>No hay datos para mostrar</Text>;
  }

  // Si los datos vienen como string JSON dentro de raw_content, parsearlos
  let parsedData = data;
  if (typeof data === 'object' && data.raw_content) {
    try {
      // Extraer el JSON del string que puede contener markdown
      const jsonMatch = data.raw_content.match(/```json\n([\s\S]*?)\n```/) || data.raw_content.match(/{[\s\S]*}/);
      if (jsonMatch) {
        parsedData = JSON.parse(jsonMatch[1] || jsonMatch[0]);
      } else {
        // Si no hay markdown, intentar parsear directamente
        parsedData = JSON.parse(data.raw_content);
      }
    } catch (error) {
      console.error('Error parsing JSON from raw_content:', error);
      // Mantener los datos originales si hay error al parsear
      parsedData = data;
    }
  }

  // Normalizar la estructura de datos para ser compatible con ambos formatos
  // Si viene en formato 'blocks' (de Deepseek), convertirlo a formato 'sections'
  if (parsedData.blocks && !parsedData.sections) {
    parsedData = {
      ...parsedData,
      sections: parsedData.blocks.map((block: any) => {
        // Mapear tipos de blocks a tipos de sections
        let type = block.type;
        let level = 2;
        
        switch (block.type) {
          case 'h1':
            type = 'heading';
            level = 1;
            break;
          case 'h2':
            type = 'heading';
            level = 2;
            break;
          case 'h3':
            type = 'heading';
            level = 3;
            break;
          case 'bulleted_list':
            type = 'list';
            break;
          case 'numbered_list':
            type = 'list';
            break;
          case 'paragraph':
          case 'summary_block':
          case 'concept_block':
          case 'key_concepts_block':
          case 'example':
          case 'important_note':
          case 'quote':
          case 'code':
          case 'formula':
            type = block.type;
            break;
          // Mantener otros tipos como est√°n
        }
        
        return {
          type,
          content: block.text || block.content,
          // Preservar campos espec√≠ficos para diferentes tipos de bloques
          ...(type === 'concept_block' && {
            term: block.term,
            definition: block.definition,
            examples: block.examples
          }),
          ...(type === 'summary_block' && {
            content: block.content
          }),
          ...(type === 'key_concepts_block' && {
            concepts: block.concepts
          }),
          ...(type === 'heading' && { level }),
          ...(type === 'list' && { 
            style: block.type === 'numbered_list' ? 'numbered' : 'bulleted',
            items: block.items || [block.text]
          })
        };
      })
    };
  }

  const handleEdit = (path: string, element: any) => {
    console.log('JSONRenderer - Editando elemento:', path, element);
    console.log('Tipo de elemento:', typeof element, 'Estructura:', JSON.stringify(element, null, 2));
    
    // Para todos los elementos, abrir el modal editor si est√° disponible
    // Esto incluye title, summary, paragraphs, lists, concept_blocks, etc.
    console.log('üìù Abriendo modal editor para elemento en path:', path);
    console.log('Elemento a editar estructura:', JSON.stringify(element, null, 2));

    // Determinar el contenido a editar basado en el tipo de elemento
    let contentToEdit = element;

    // Para el t√≠tulo principal (objeto con title/summary)
    if (element.title !== undefined && path === 'title') {
      contentToEdit = element.title;
    }
    // Para elementos que son strings simples
    else if (typeof element === 'string') {
      contentToEdit = element;
    }
    // Para todas las secciones, mantener el objeto completo para que el editor
    // pueda acceder a todas las propiedades (type, content, term, definition, etc.)
    // El editor modal necesita la estructura completa para renderizar correctamente

    if (openModalEditor) {
      openModalEditor(contentToEdit, path, element);
    } else if (onEdit) {
      // Fallback al callback onEdit si openModalEditor no est√° disponible
      onEdit(path, element);
    }
  };

  const handleDelete = (path: string, element: any) => {
    if (onDelete) {
      onDelete(path, element);
    }
  };

  // Generar contenido para bloque con IA
  const generateBlockWithAI = async (section: any, index: number, userPrompt: string) => {
    try {
      setAiLoading(true);
      
      // Convertir todo el contenido a texto para contexto
      const contextText = JSON.stringify(parsedData, null, 2);
      console.log('üìã Contexto enviado a IA (primeros 200 chars):', contextText.substring(0, 200));
      
      console.log('üîç Generando bloque con IA - Tipo:', section.type);
      console.log('üìù Prompt completo del usuario:', userPrompt);
      console.log('üìã Contexto length:', contextText.length);
      
      const response = await transcriptionAPI.generateBlock(
        section.type,
        userPrompt,
        contextText,
        'general'
      );

      console.log('üì± Respuesta del backend:', JSON.stringify(response, null, 2));

      if (response.success && response.data.generated_content) {
        console.log('üéØ Contenido generado recibido:', JSON.stringify(response.data.generated_content, null, 2));
        
        // Crear un nuevo bloque con el contenido generado por IA (en lugar de reemplazar)
        let newBlock = response.data.generated_content;
        
        // Si el contenido viene como string (con markdown), extraer el JSON
        if (typeof newBlock === 'string') {
          console.log('üìÑ Contenido es string, intentando extraer JSON...');
          
          // Intentar extraer JSON del formato markdown ```json\n{...}\n```
          const jsonMatch = newBlock.match(/```json\n([\s\S]*?)\n```/) || newBlock.match(/{[\s\S]*}/);
          
          if (jsonMatch) {
            try {
              const jsonContent = jsonMatch[1] || jsonMatch[0];
              console.log('üéØ JSON extra√≠do:', jsonContent.substring(0, 200) + '...');
              newBlock = JSON.parse(jsonContent);
              console.log('‚úÖ JSON parseado correctamente:', JSON.stringify(newBlock, null, 2));
            } catch (parseError) {
              console.error('‚ùå Error parsing JSON from markdown:', parseError);
              // Si falla el parsing, usar el contenido como p√°rrafo
              newBlock = {
                type: 'paragraph',
                content: newBlock.replace(/```json\n?|\n?```/g, '').trim()
              };
            }
          } else {
            // Si no hay formato markdown, usar como p√°rrafo
            newBlock = {
              type: 'paragraph',
              content: newBlock.trim()
            };
          }
        }
        
        console.log('‚ûï Nuevo bloque generado:', JSON.stringify(newBlock, null, 2));
        
        // Llamar a onAdd para insertar un nuevo bloque en la misma posici√≥n
        if (onAdd) {
          console.log('üì§ Insertando nuevo bloque en la posici√≥n:', index);
          console.log('üì¶ Bloque a insertar:', JSON.stringify(newBlock, null, 2));
          onAdd(newBlock, index);
        } else {
          console.error('‚ùå onAdd callback no est√° definido');
        }
        Alert.alert('‚úÖ √âxito', 'Nuevo bloque generado con IA');
      } else {
        console.error('‚ùå Error en la respuesta del backend:', response);
        Alert.alert('‚ùå Error', 'No se pudo generar el contenido con IA');
      }
      
    } catch (error) {
      console.error('Error generando bloque con IA:', error);
      Alert.alert('‚ùå Error', 'No se pudo generar el contenido con IA');
    } finally {
      setAiLoading(false);
      setShowAIModal(false);
      setAiPrompt('');
    }
  };

  // Abrir modal de IA para un bloque espec√≠fico
  const openAIModal = (section: any, index: number) => {
    setCurrentAISection(section);
    setCurrentAIIndex(index);
    setShowAIModal(true);
  };

  const handleAddBlock = (typeOrBlock: string | any) => {
    setShowAddMenu(false);
    
    // Llamar al callback onAdd si est√° definido
    if (onAdd) {
      // Asegurarse de que insertPosition no sea null
      const position = insertPosition !== null ? insertPosition : undefined;
      onAdd(typeOrBlock, position);
    }
    
    // Resetear la posici√≥n de inserci√≥n
    setInsertPosition(null);
  };

  const renderSection = (section: any, index: number) => {
    const sectionKey = `section-${index}-${section.type}-${section.content?.substring(0, 20) || 'empty'}`;
    
    switch (section.type) {
      case 'heading':
        return (
          <View key={sectionKey} style={styles.sectionContainer}>
            <View style={styles.sectionHeader}>
              <View style={{ flexDirection: 'row', alignItems: 'center', gap: 8 }}>
                <TouchableOpacity 
                  style={styles.addButton}
                  onPress={() => {
                    setInsertPosition(index);
                    setShowAddMenu(true);
                  }}
                >
                  <Ionicons name="add" size={16} color="#4A00E0" />
                </TouchableOpacity>
                <TouchableOpacity 
                  style={[styles.addButton, { backgroundColor: 'rgba(74, 0, 224, 0.2)' }]}
                  onPress={() => openAIModal(section, index)}
                >
                  <Ionicons name="sparkles" size={16} color="#4A00E0" />
                </TouchableOpacity>
              </View>
              <TouchableOpacity 
                style={styles.deleteButton}
                onPress={() => handleDelete(`sections.${index}`, section)}
              >
                <Ionicons name="trash" size={16} color="#ff4757" />
              </TouchableOpacity>
            </View>
            <TouchableOpacity 
              style={[styles.headingContainer, styles.editableContainer]}
              onPress={() => handleEdit(`sections.${index}`, section)}
            >
              <Text style={[
                styles.heading, 
                { 
                  fontSize: section.level === 1 ? 24 : section.level === 2 ? 20 : 18,
                  textAlign: section.level === 1 ? 'center' : 'left'
                }
              ]}>
                {section.content}
              </Text>
            </TouchableOpacity>
          </View>
        );

      case 'paragraph':
        return (
          <View key={sectionKey} style={styles.sectionContainer}>
            <View style={styles.sectionHeader}>
              <View style={{ flexDirection: 'row', alignItems: 'center', gap: 8 }}>
                <TouchableOpacity 
                  style={styles.addButton}
                  onPress={() => {
                    setInsertPosition(index);
                    setShowAddMenu(true);
                  }}
                >
                  <Ionicons name="add" size={16} color="#4A00E0" />
                </TouchableOpacity>
                <TouchableOpacity 
                  style={[styles.addButton, { backgroundColor: 'rgba(74, 0, 224, 0.2)' }]}
                  onPress={() => openAIModal(section, index)}
                >
                  <Ionicons name="sparkles" size={16} color="#4A00E0" />
                </TouchableOpacity>
              </View>
              <TouchableOpacity 
                style={styles.deleteButton}
                onPress={() => handleDelete(`sections.${index}`, section)}
              >
                <Ionicons name="trash" size={16} color="#ff4757" />
              </TouchableOpacity>
            </View>
            <TouchableOpacity 
              style={[styles.paragraphContainer, styles.editableContainer]}
              onPress={() => handleEdit(`sections.${index}`, section)}
            >
              <Text style={styles.paragraph}>{section.content}</Text>
            </TouchableOpacity>
          </View>
        );

      case 'list':
        return (
          <View key={sectionKey} style={styles.sectionContainer}>
            <View style={styles.sectionHeader}>
              <View style={{ flexDirection: 'row', alignItems: 'center', gap: 8 }}>
                <TouchableOpacity 
                  style={styles.addButton}
                  onPress={() => {
                    setInsertPosition(index);
                    setShowAddMenu(true);
                  }}
                >
                  <Ionicons name="add" size={16} color="#4A00E0" />
                </TouchableOpacity>
                <TouchableOpacity 
                  style={[styles.addButton, { backgroundColor: 'rgba(74, 0, 224, 0.2)' }]}
                  onPress={() => openAIModal(section, index)}
                >
                  <Ionicons name="sparkles" size={16} color="#4A00E0" />
                </TouchableOpacity>
              </View>
              <TouchableOpacity 
                style={styles.deleteButton}
                onPress={() => handleDelete(`sections.${index}`, section)}
              >
                <Ionicons name="trash" size={16} color="#ff4757" />
              </TouchableOpacity>
            </View>
            <TouchableOpacity 
              style={[styles.listContainer, styles.editableContainer]}
              onPress={() => handleEdit(`sections.${index}`, section)}
            >
              {section.items?.map((item: string, itemIndex: number) => (
                <View key={`item-${itemIndex}`} style={styles.listItem}>
                  <Ionicons 
                    name={section.style === 'numbered' ? "ellipse" : "remove"} 
                    size={14} 
                    color="#666" 
                    style={styles.listIcon}
                  />
                  <Text style={styles.listText}>{item}</Text>
                </View>
              ))}
            </TouchableOpacity>
          </View>
        );

      case 'concept_block':
        return (
          <View key={sectionKey} style={styles.sectionContainer}>
            <View style={styles.sectionHeader}>
              <View style={{ flexDirection: 'row', alignItems: 'center', gap: 8 }}>
                <TouchableOpacity 
                  style={styles.addButton}
                  onPress={() => {
                      setInsertPosition(index);
                      setShowAddMenu(true);
                    }}
                >
                  <Ionicons name="add" size={16} color="#4A00E0" />
                </TouchableOpacity>
                <TouchableOpacity 
                  style={[styles.addButton, { backgroundColor: 'rgba(74, 0, 224, 0.2)' }]}
                  onPress={() => openAIModal(section, index)}
                >
                  <Ionicons name="sparkles" size={16} color="#4A00E0" />
                </TouchableOpacity>
              </View>
              <TouchableOpacity 
                style={styles.deleteButton}
                onPress={() => handleDelete(`sections.${index}`, section)}
              >
                <Ionicons name="trash" size={16} color="#ff4757" />
              </TouchableOpacity>
            </View>
            <TouchableOpacity 
              style={[styles.conceptContainer, styles.editableContainer]}
              onPress={() => handleEdit(`sections.${index}`, section)}
            >
              <Text style={styles.conceptTerm}>{section.term}</Text>
              {section.definition && (
                <Text style={styles.conceptDefinition}>{section.definition}</Text>
              )}
              {section.examples && section.examples.length > 0 && (
                <View style={styles.examplesContainer}>
                  <Text style={styles.examplesTitle}>Ejemplos:</Text>
                  {section.examples.map((example: string, exampleIndex: number) => (
                    <Text key={`example-${exampleIndex}`} style={styles.example}>‚Ä¢ {example}</Text>
                  ))}
                </View>
              )}
            </TouchableOpacity>
          </View>
        );

      case 'summary_block':
        return (
          <View key={sectionKey} style={styles.sectionContainer}>
            <View style={styles.sectionHeader}>
              <View style={{ flexDirection: 'row', alignItems: 'center', gap: 8 }}>
                <TouchableOpacity 
                  style={styles.addButton}
                  onPress={() => {
                      setInsertPosition(index);
                      setShowAddMenu(true);
                    }}
                >
                  <Ionicons name="add" size={16} color="#4A00E0" />
                </TouchableOpacity>
                <TouchableOpacity 
                  style={[styles.addButton, { backgroundColor: 'rgba(74, 0, 224, 0.2)' }]}
                  onPress={() => openAIModal(section, index)}
                >
                  <Ionicons name="sparkles" size={16} color="#4A00E0" />
                </TouchableOpacity>
              </View>
              <TouchableOpacity 
                style={styles.deleteButton}
                onPress={() => handleDelete(`sections.${index}`, section)}
              >
                <Ionicons name="trash" size={16} color="#ff4757" />
              </TouchableOpacity>
            </View>
            <TouchableOpacity 
              style={[styles.summaryContainer, styles.editableContainer]}
              onPress={() => handleEdit(`sections.${index}`, section)}
            >
              <Text style={styles.sectionTitle}>üìã Resumen</Text>
              <Text style={styles.summaryText}>{section.content}</Text>
            </TouchableOpacity>
          </View>
        );

      case 'key_concepts_block':
        return (
          <View key={sectionKey} style={styles.sectionContainer}>
            <View style={styles.sectionHeader}>
              <View style={{ flexDirection: 'row', alignItems: 'center', gap: 8 }}>
                <TouchableOpacity 
                  style={styles.addButton}
                  onPress={() => {
                      setInsertPosition(index);
                      setShowAddMenu(true);
                    }}
                >
                  <Ionicons name="add" size={16} color="#4A00E0" />
                </TouchableOpacity>
                <TouchableOpacity 
                  style={[styles.addButton, { backgroundColor: 'rgba(74, 0, 224, 0.2)' }]}
                  onPress={() => openAIModal(section, index)}
                >
                  <Ionicons name="sparkles" size={16} color="#4A00E0" />
                </TouchableOpacity>
              </View>
              <TouchableOpacity 
                style={styles.deleteButton}
                onPress={() => handleDelete(`sections.${index}`, section)}
              >
                <Ionicons name="trash" size={16} color="#ff4757" />
              </TouchableOpacity>
            </View>
            <TouchableOpacity 
              style={[styles.keyConceptsContainer, styles.editableContainer]}
              onPress={() => handleEdit(`sections.${index}`, section)}
            >
              <Text style={styles.sectionTitle}>üîë Conceptos Clave</Text>
              <View style={styles.conceptsList}>
                {section.concepts?.map((concept: string, conceptIndex: number) => (
                  <View key={`concept-${conceptIndex}`} style={styles.conceptPill}>
                    <Ionicons name="bookmark" size={12} color="white" />
                    <Text style={styles.conceptPillText}>{concept}</Text>
                  </View>
                ))}
              </View>
            </TouchableOpacity>
          </View>
        );

      case 'summary':
        return (
          <View key={sectionKey} style={styles.sectionContainer}>
            <View style={styles.sectionHeader}>
              <View style={{ flexDirection: 'row', alignItems: 'center', gap: 8 }}>
                <TouchableOpacity 
                  style={styles.addButton}
                  onPress={() => {
                    setInsertPosition(index);
                    setShowAddMenu(true);
                  }}
                >
                  <Ionicons name="add" size={16} color="#4A00E0" />
                </TouchableOpacity>
                <TouchableOpacity 
                  style={[styles.addButton, { backgroundColor: 'rgba(74, 0, 224, 0.2)' }]}
                  onPress={() => openAIModal(section, index)}
                >
                  <Ionicons name="sparkles" size={16} color="#4A00E0" />
                </TouchableOpacity>
              </View>
              <TouchableOpacity 
                style={styles.deleteButton}
                onPress={() => handleDelete(`sections.${index}`, section)}
              >
                <Ionicons name="trash" size={16} color="#ff4757" />
              </TouchableOpacity>
            </View>
            <TouchableOpacity 
              style={[styles.summaryContainer, styles.editableContainer]}
              onPress={() => handleEdit(`sections.${index}`, section)}
            >
              <Text style={styles.sectionTitle}>üìã Resumen</Text>
              <Text style={styles.summaryText}>{section.content}</Text>
            </TouchableOpacity>
          </View>
        );

      case 'example':
      case 'example_block':  // Fallback para compatibilidad con IA
        return (
          <View key={sectionKey} style={styles.sectionContainer}>
            <View style={styles.sectionHeader}>
              <View style={{ flexDirection: 'row', alignItems: 'center', gap: 8 }}>
                <TouchableOpacity 
                  style={styles.addButton}
                  onPress={() => {
                    setInsertPosition(index);
                    setShowAddMenu(true);
                  }}
                >
                  <Ionicons name="add" size={16} color="#4A00E0" />
                </TouchableOpacity>
                <TouchableOpacity 
                  style={[styles.addButton, { backgroundColor: 'rgba(74, 0, 224, 0.2)' }]}
                  onPress={() => openAIModal(section, index)}
                >
                  <Ionicons name="sparkles" size={16} color="#4A00E0" />
                </TouchableOpacity>
              </View>
              <TouchableOpacity 
                style={styles.deleteButton}
                onPress={() => handleDelete(`sections.${index}`, section)}
              >
                <Ionicons name="trash" size={16} color="#ff4757" />
              </TouchableOpacity>
            </View>
            <TouchableOpacity 
              style={[styles.exampleContainer, styles.editableContainer]}
              onPress={() => handleEdit(`sections.${index}`, section)}
            >
              <Text style={styles.exampleTitle}>üìù Ejemplo</Text>
              <Text style={styles.exampleText}>{section.content}</Text>
              {section.title && (
                <Text style={[styles.exampleText, {fontWeight: 'bold', marginTop: 8}]}>
                  {section.title}
                </Text>
              )}
            </TouchableOpacity>
          </View>
        );

      case 'important_note':
        return (
          <View key={sectionKey} style={styles.sectionContainer}>
            <View style={styles.sectionHeader}>
              <View style={{ flexDirection: 'row', alignItems: 'center', gap: 8 }}>
                <TouchableOpacity 
                  style={styles.addButton}
                  onPress={() => {
                    setInsertPosition(index);
                    setShowAddMenu(true);
                  }}
                >
                  <Ionicons name="add" size={16} color="#4A00E0" />
                </TouchableOpacity>
                <TouchableOpacity 
                  style={[styles.addButton, { backgroundColor: 'rgba(74, 0, 224, 0.2)' }]}
                  onPress={() => openAIModal(section, index)}
                >
                  <Ionicons name="sparkles" size={16} color="#4A00E0" />
                </TouchableOpacity>
              </View>
              <TouchableOpacity 
                style={styles.deleteButton}
                onPress={() => handleDelete(`sections.${index}`, section)}
              >
                <Ionicons name="trash" size={16} color="#ff4757" />
              </TouchableOpacity>
            </View>
            <TouchableOpacity 
              style={[styles.noteContainer, styles.editableContainer]}
              onPress={() => handleEdit(`sections.${index}`, section)}
            >
              <Text style={styles.noteTitle}>üí° Nota Importante</Text>
              <Text style={styles.noteText}>{section.content}</Text>
            </TouchableOpacity>
          </View>
        );

      case 'quote':
        return (
          <View key={sectionKey} style={styles.sectionContainer}>
            <View style={styles.sectionHeader}>
              <View style={{ flexDirection: 'row', alignItems: 'center', gap: 8 }}>
                <TouchableOpacity 
                  style={styles.addButton}
                  onPress={() => {
                    setInsertPosition(index);
                    setShowAddMenu(true);
                  }}
                >
                  <Ionicons name="add" size={16} color="#4A00E0" />
                </TouchableOpacity>
                <TouchableOpacity 
                  style={[styles.addButton, { backgroundColor: 'rgba(74, 0, 224, 0.2)' }]}
                  onPress={() => openAIModal(section, index)}
                >
                  <Ionicons name="sparkles" size={16} color="#4A00E0" />
                </TouchableOpacity>
              </View>
              <TouchableOpacity 
                style={styles.deleteButton}
                onPress={() => handleDelete(`sections.${index}`, section)}
              >
                <Ionicons name="trash" size={16} color="#ff4757" />
              </TouchableOpacity>
            </View>
            <TouchableOpacity 
              style={[styles.quoteContainer, styles.editableContainer]}
              onPress={() => handleEdit(`sections.${index}`, section)}
            >
              <Text style={styles.quoteText}>"{section.content}"</Text>
            </TouchableOpacity>
          </View>
        );

      case 'code':
        return (
          <View key={sectionKey} style={styles.sectionContainer}>
            <View style={styles.sectionHeader}>
              <View style={{ flexDirection: 'row', alignItems: 'center', gap: 8 }}>
                <TouchableOpacity 
                  style={styles.addButton}
                  onPress={() => {
                    setInsertPosition(index);
                    setShowAddMenu(true);
                  }}
                >
                  <Ionicons name="add" size={16} color="#4A00E0" />
                </TouchableOpacity>
                <TouchableOpacity 
                  style={[styles.addButton, { backgroundColor: 'rgba(74, 0, 224, 0.2)' }]}
                  onPress={() => openAIModal(section, index)}
                >
                  <Ionicons name="sparkles" size={16} color="#4A00E0" />
                </TouchableOpacity>
              </View>
              <TouchableOpacity 
                style={styles.deleteButton}
                onPress={() => handleDelete(`sections.${index}`, section)}
              >
                <Ionicons name="trash" size={16} color="#ff4757" />
              </TouchableOpacity>
            </View>
            <TouchableOpacity 
              style={[styles.codeContainer, styles.editableContainer]}
              onPress={() => handleEdit(`sections.${index}`, section)}
            >
              <Text style={styles.codeText}>{section.content}</Text>
            </TouchableOpacity>
          </View>
        );

      case 'formula':
        return (
          <View key={sectionKey} style={styles.sectionContainer}>
            <View style={styles.sectionHeader}>
              <View style={{ flexDirection: 'row', alignItems: 'center', gap: 8 }}>
                <TouchableOpacity 
                  style={styles.addButton}
                  onPress={() => {
                    setInsertPosition(index);
                    setShowAddMenu(true);
                  }}
                >
                  <Ionicons name="add" size={16} color="#4A00E0" />
                </TouchableOpacity>
                <TouchableOpacity 
                  style={[styles.addButton, { backgroundColor: 'rgba(74, 0, 224, 0.2)' }]}
                  onPress={() => openAIModal(section, index)}
                >
                  <Ionicons name="sparkles" size={16} color="#4A00E0" />
                </TouchableOpacity>
              </View>
              <TouchableOpacity 
                style={styles.deleteButton}
                onPress={() => handleDelete(`sections.${index}`, section)}
              >
                <Ionicons name="trash" size={16} color="#ff4757" />
              </TouchableOpacity>
            </View>
            <TouchableOpacity 
              style={[styles.formulaContainer, styles.editableContainer]}
              onPress={() => handleEdit(`sections.${index}`, section)}
            >
              <Text style={styles.formulaTitle}>üßÆ F√≥rmula Matem√°tica</Text>
              <Text style={styles.formulaText}>{section.content}</Text>
              {section.description && (
                <Text style={styles.formulaDescription}>{section.description}</Text>
              )}
            </TouchableOpacity>
          </View>
        );

      default:
        return (
          <View key={sectionKey} style={styles.sectionContainer}>
            <View style={styles.sectionHeader}>
              <TouchableOpacity 
                style={styles.addButton}
                onPress={() => {
                    setInsertPosition(index);
                    setShowAddMenu(true);
                  }}
              >
                <Ionicons name="add" size={16} color="#4A00E0" />
              </TouchableOpacity>
              <TouchableOpacity 
                style={styles.deleteButton}
                onPress={() => handleDelete(`sections.${index}`, section)}
              >
                <Ionicons name="trash" size={16} color="#ff4757" />
              </TouchableOpacity>
            </View>
            <View style={[styles.unknownContainer, styles.editableContainer]}>
              <Text style={styles.unknownText}>
                {JSON.stringify(section, null, 2)}
              </Text>
            </View>
          </View>
        );
    }
  };

  return (
    <View style={styles.mainContainer}>
      <ScrollView style={styles.container}>
      {/* T√≠tulo principal si est√° disponible - Editable */}
      {(parsedData.title || parsedData.summary) && (
        <View style={styles.mainTitleContainer}>
          <TouchableOpacity 
            style={[styles.mainTitleTouchable, styles.editableContainer]}
            onPress={() => handleEdit('title', {title: parsedData.title, summary: parsedData.summary})}
          >
            <Text style={styles.mainTitle}>
              {parsedData.title || 'Resumen de la Clase'}
            </Text>
            {parsedData.summary && (
              <Text style={styles.mainSummary}>{parsedData.summary}</Text>
            )}
          </TouchableOpacity>
        </View>
      )}

      {/* Todas las secciones en un array unificado */}
      {parsedData.sections && parsedData.sections.map((section: any, index: number) => (
        <View key={`section-${index}-${section.type}-${section.content?.substring(0, 20) || 'empty'}`}>
          {renderSection(section, index)}
        </View>
      ))}

      {/* Fallback para datos crudos */}
      {!parsedData.sections && (
        <View style={styles.rawContainer}>
          <Text style={styles.rawTitle}>Datos en formato crudo:</Text>
          <Text style={styles.rawText}>{JSON.stringify(parsedData, null, 2)}</Text>
        </View>
      )}

      </ScrollView>

      {/* Bot√≥n para a√±adir bloque al final */}
      <View style={styles.addBottomContainer}>
        <TouchableOpacity 
          style={styles.addBottomButton}
          onPress={() => {
            setInsertPosition(parsedData.sections ? parsedData.sections.length : 0);
            setShowAddMenu(true);
          }}
        >
          <Ionicons name="add" size={16} color="#4A00E0" />
        </TouchableOpacity>
      </View>

      {/* Modal para seleccionar tipo de bloque */}
      <Modal
        visible={showAddMenu}
        transparent={true}
        animationType="fade"
        onRequestClose={() => setShowAddMenu(false)}
      >
        <Pressable 
          style={styles.modalOverlay}
          onPress={() => setShowAddMenu(false)}
        >
          <View style={styles.modalContent}>
            <Text style={styles.modalTitle}>Seleccionar tipo de bloque</Text>
            
            <Pressable 
              style={styles.modalOption}
              onPress={() => handleAddBlock('heading')}
            >
              <Ionicons name="text" size={20} color="#4A00E0" />
              <Text style={styles.modalOptionText}>Encabezado</Text>
            </Pressable>
            
            <Pressable 
              style={styles.modalOption}
              onPress={() => handleAddBlock('paragraph')}
            >
              <Ionicons name="document-text" size={20} color="#4A00E0" />
              <Text style={styles.modalOptionText}>P√°rrafo</Text>
            </Pressable>
            
            <Pressable 
              style={styles.modalOption}
              onPress={() => handleAddBlock('list')}
            >
              <Ionicons name="list" size={20} color="#4A00E0" />
              <Text style={styles.modalOptionText}>Lista</Text>
            </Pressable>
            
            <Pressable 
              style={styles.modalOption}
              onPress={() => handleAddBlock('concept_block')}
            >
              <Ionicons name="bulb" size={20} color="#4A00E0" />
              <Text style={styles.modalOptionText}>Concepto</Text>
            </Pressable>
            
            <Pressable 
              style={styles.modalOption}
              onPress={() => handleAddBlock('summary_block')}
            >
              <Ionicons name="document-text" size={20} color="#4A00E0" />
              <Text style={styles.modalOptionText}>Resumen</Text>
            </Pressable>
            
            <Pressable 
              style={styles.modalOption}
              onPress={() => handleAddBlock('key_concepts_block')}
            >
              <Ionicons name="key" size={20} color="#4A00E0" />
              <Text style={styles.modalOptionText}>Conceptos Clave</Text>
            </Pressable>
            
            <Pressable 
              style={[styles.modalOption, styles.modalCancel]}
              onPress={() => setShowAddMenu(false)}
            >
              <Ionicons name="close" size={20} color="#666" />
              <Text style={[styles.modalOptionText, styles.modalCancelText]}>Cancelar</Text>
            </Pressable>
          </View>
        </Pressable>
      </Modal>

      {/* Modal para generaci√≥n con IA */}
      <Modal
        visible={showAIModal}
        transparent={true}
        animationType="fade"
        onRequestClose={() => {
          setShowAIModal(false);
          setAiPrompt('');
        }}
      >
        <Pressable 
          style={styles.modalOverlay}
          onPress={() => {
            setShowAIModal(false);
            setAiPrompt('');
          }}
        >
          <View style={styles.modalContent}>
            <Text style={styles.modalTitle}>Generar con IA</Text>
            
            <Text style={{marginBottom: 8, fontSize: 14, color: '#666'}}>
              ¬øQu√© quieres que genere la IA para este bloque?
            </Text>
            
            <TextInput
              style={{
                borderWidth: 1,
                borderColor: '#ddd',
                borderRadius: 8,
                padding: 12,
                marginBottom: 16,
                minHeight: 100,
                textAlignVertical: 'top',
                fontSize: 14,
              }}
              multiline={true}
              placeholder="Ej: Explica este concepto con m√°s detalle, a√±ade ejemplos pr√°cticos, etc."
              value={aiPrompt}
              onChangeText={setAiPrompt}
            />
            
            {aiLoading ? (
              <View style={{alignItems: 'center', padding: 16}}>
                <ActivityIndicator size="small" color="#4A00E0" />
                <Text style={{marginTop: 8, fontSize: 12, color: '#666'}}>
                  Generando con IA...
                </Text>
              </View>
            ) : (
              <View style={{flexDirection: 'row', gap: 8}}>
                <Pressable 
                  style={[styles.modalOption, {flex: 1, backgroundColor: '#4A00E0'}]}
                  onPress={() => {
                    if (aiPrompt.trim() && currentAISection && currentAIIndex !== null) {
                      generateBlockWithAI(currentAISection, currentAIIndex, aiPrompt);
                    }
                  }}
                >
                  <Ionicons name="sparkles" size={16} color="white" />
                  <Text style={[styles.modalOptionText, {color: 'white'}]}>Generar</Text>
                </Pressable>
                
                <Pressable 
                  style={[styles.modalOption, styles.modalCancel, {flex: 1}]}
                  onPress={() => {
                    setShowAIModal(false);
                    setAiPrompt('');
                  }}
                >
                  <Ionicons name="close" size={16} color="#666" />
                  <Text style={[styles.modalOptionText, styles.modalCancelText]}>Cancelar</Text>
                </Pressable>
              </View>
            )}
          </View>
        </Pressable>
      </Modal>
    </View>
  );
};

export default JSONRenderer;
